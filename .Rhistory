deaths$variable <-as.Date(substrLeft(as.character(deaths$variable), 1), format = "%m.%d.%y")
colnames(deaths)[5]<-"Date"
colnames(deaths)[6]<-"Deaths"
#convert 2 column to character
############### recovered cases
recovered<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
recovered<-recovered[,c(1:4, (ncol(recovered)-120):ncol(recovered)) ]
recovered[,1:2] <- data.frame(lapply(recovered[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(recovered$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#recovered[which(recovered$Country.Region %in% DFCountry), ][,2]<-recovered[which(recovered$Country.Region %in% DFCountry), ][,1]
recovered[which(recovered$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
recovered[which(recovered$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
recovered <- melt(recovered, id.vars=1:4)
#recovered$variable <- as.Date(substring(ifelse(substrRight(as.character(recovered$variable), 2)=="20",paste0(str_sub(recovered$variable, end=-3),"2020"),paste0(str_sub(recovered$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
recovered$variable <-as.Date(substrLeft(as.character(recovered$variable), 1), format = "%m.%d.%y")
colnames(recovered)[5]<-"Date"
colnames(recovered)[6]<-"Recovered"
#convert 2 column to character
######################### vaccination data
Vaccin<-read.csv("https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/vaccine_data_global.csv")
IranVac<-dplyr::filter(Vaccin , Country_Region == "Iran")
#
#
WorldData<-merge(confirmed,recovered)
WorldDataMg<-merge(WorldData,deaths)
WorldDataMg<-WorldDataMg[,c("Country.Region", "Lat","Long","Date","Province.State","Confirmed","Recovered","Deaths")]
# ####### For some countries recovered and deaths misplaced it corrected here
# WorldDataMg<-WorldDataMg %>%
#   mutate(Deaths1 = ifelse(Recovered < Deaths, Recovered, Deaths),
#          Recovered = ifelse(Recovered < Deaths, Deaths, Recovered)) %>%
#   select(Country.Region,Lat,Long,Date,Province.State,Confirmed,Recovered, Deaths = Deaths1)
WorldData <- melt(WorldDataMg, id.vars=1:5)
WorldData$value<-as.numeric(as.character(WorldData$value))
WorldData$diff <- ave(WorldData$value, factor(c(WorldData$Country.Region)), FUN=function(x) as.numeric(as.character(c( NA ,diff(x)))))
WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,8]<-WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,7]# replace NA with firs value for series
WorldMean<-aggregate(value~ variable+Date,WorldData,FUN = "mean" )
WorldMin<-aggregate(value~ variable+Date,WorldData,FUN = "min" )
WorldMax<-aggregate(value~ variable+Date,WorldData,FUN = "max" )
WorldSum<-aggregate(value~ variable+Date+Country.Region+Province.State+Lat+Long,WorldData,FUN = "sum" )
WorldDiff<-aggregate(diff~ variable+Date+ Country.Region+Province.State+Lat+Long,WorldData,FUN = "max" )
WorldDiffMg<-dcast(WorldDiff, Country.Region +Lat+Long +Date+Province.State ~ variable, value.var = "diff")
WorldSumMax<-aggregate(value~ variable+Country.Region+Province.State ,WorldSum,FUN = "max" )
WorldSum_F<- aggregate(value~ variable+Date+Country.Region,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = value
)
WorldDiff_F<- aggregate(diff~ variable+Date+Country.Region,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = diff
)
WorldSumDiff<-merge(WorldSum_F,WorldDiff_F %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Date"))
WorldSumDiffS<-dplyr::filter(WorldSumDiff , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSum_FP<- aggregate(value~ variable+Date+Country.Region+Province.State,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = value
)
WorldDiff_FP<- aggregate(diff~ variable+Date+Country.Region+Province.State,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = diff
)
WorldSumDiff_FP<-merge(WorldSum_FP,WorldDiff_FP %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Province.State","Date"))
WorldSumDiff_FPS<-dplyr::filter(WorldSumDiff_FP , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSumAgr<<-aggregate(value~ variable+Date,WorldSum,FUN = "sum" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = value)
WorldDiffAgr<-aggregate(diff~ variable+Date,WorldDiff,FUN = "max" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = diff)%>%
rename("New.Confirmed"=Confirmed, "New.Recoverds"= Recovered, New.Deaths ="Deaths" )
WorldSumDiffAgr<-merge(WorldSumAgr,WorldDiffAgr , by=c("Date"))
IranSeries<-WorldSumDiff[which(WorldSumDiff$Country.Region=="Iran"),-c(1,3,4,5,7)]%>%
rename("ابتلا"=New.Confirmed, "مرگ"= New.Deaths)
IranSeries<-IranSeries[-1,]
IranSeries <- melt(IranSeries, id.vars=1)
# # ########################## calander converter
#
# library(jalcal)
# HadiGreg2jal<-function (x) {
#   df<-data.frame()
#   for(i in 1:length(x)){
#     date <- as.Date(x[i], format = "%Y-%m-%d")
#     date <- strsplit(as.character(date), split = "-")[[1]]
#     year <- as.integer(date[1])
#     month <- as.integer(date[2])
#     day <- as.integer(date[3])
#
#     df[i,1]<-paste(greg2jal0(year, month, day),collapse="-")
#   }
#   df$V1
# }
#
# ###########
# IranSeries$Date<- HadiGreg2jal(IranSeries$Date)
#
IranData<-data.frame("Date"=max(WorldSumDiffS$Date),
"Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Confirmed"],
"Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Deaths"],
"New.Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Confirmed"],
"New.Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Deaths"])
##################scarping data from worldmeter
library(tidyverse)
library(rvest)
content <- read_html("https://www.worldometers.info/coronavirus/#countries")
tables <- content %>% html_table(fill = TRUE)
first_table <- tables[[1]]
first_table <- first_table[,-1]
first_table[,c(2:14,16:21)] <-first_table[,c(2:14,16:21)] %>%
mutate_all(list(~ str_replace_all(., ",", "") %>%
as.numeric %>%
replace_na(0)))
first_table[,c(2:14,16:21)]<-apply(first_table[,c(2:14,16:21)] , 2, function(x) as.numeric(as.character(x)))
IranData2<-as.data.frame(first_table[which(first_table["Country,Other"]=="Iran"), ])
save.image(file = "/srv/shiny-server/COVID19-Reporter/DATA.RData")
save(IranData,file="/srv/shiny-server/somix/IranDATA.RData")
save(IranData2,file="/srv/shiny-server/somix/IranDATA2.RData")
save(IranVac,file="/srv/shiny-server/somix/IranVac.RData")
save(IranSeries,file="/srv/shiny-server/somix/IranSeries.RData")
save.image(file = "J:/Social mixing/Shiny apps/SM project/somix/DATA.RData")
save(IranData,file="J:/Social mixing/Shiny apps/SM project/somix/IranDATA.RData")
save(IranData2,file="J:/Social mixing/Shiny apps/SM project/somix/IranDATA2.RData")
save(IranVac,file="J:/Social mixing/Shiny apps/SM project/somix/IranVac.RData")
save(IranSeries,file="J:/Social mixing/Shiny apps/SM project/somix/IranSeries.RData")
# save.image(file = "J:/Version with seir/Version for IER/COVID19-Reporter/DATA.RData")
runApp()
load("D:/Social mixing/Shiny apps/SM project/somix/IranDATA2.RData")
View(IranData2)
#  0 17 * * * /usr/local/bin/Rscript /Users/username/emailSender.R
#  0 17 * * * Rscript /home/script2/scriptSecos.R
library(reshape2)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrLeft <- function(x, n){
substr(x, 1+n, nchar(x))
}
# load("Populations.RData") # loading population
# ############### Confirmed cases
confirmed<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
confirmed<-confirmed[,c(1:4, (ncol(confirmed)-120):ncol(confirmed)) ] # data of recent 6 months
#replache china with provinces
confirmed[,1:2] <- data.frame(lapply(confirmed[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(confirmed$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#confirmed[which(confirmed$Country.Region %in% DFCountry), ][,2]<-confirmed[which(confirmed$Country.Region %in% DFCountry), ][,1]
confirmed[which(confirmed$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
confirmed[which(confirmed$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
confirmed <- melt(confirmed, id.vars=1:4)
library(stringr)  #str_sub(confirmed$variable, end=-2)
#devtools::install_github("freysimon/TigR")
#library(TigR)
#confirmed$variable <- as.Date(substring(ifelse(substrRight(as.character(confirmed$variable), 2)=="20",paste0(str_sub(confirmed$variable, end=-3),"2020"),paste0(str_sub(confirmed$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
confirmed$variable <-as.Date(substrLeft(as.character(confirmed$variable), 1), format = "%m.%d.%y")
colnames(confirmed)[5]<-"Date"
colnames(confirmed)[6]<-"Confirmed"
#convert 2 column to character
library(dplyr)
############### dead cases
deaths<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
deaths<-deaths[,c(1:4, (ncol(deaths)-120):ncol(deaths)) ]
#replache china with provinces
deaths[,1:2] <- data.frame(lapply(deaths[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(deaths$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#deaths[which(deaths$Country.Region %in% DFCountry), ][,2]<-deaths[which(deaths$Country.Region %in% DFCountry), ][,1]
deaths[which(deaths$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
deaths[which(deaths$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
deaths <- melt(deaths, id.vars=1:4)
#deaths$variable <- as.Date(substring(ifelse(substrRight(as.character(deaths$variable), 2)=="20",paste0(str_sub(deaths$variable, end=-3),"2020"),paste0(str_sub(deaths$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
deaths$variable <-as.Date(substrLeft(as.character(deaths$variable), 1), format = "%m.%d.%y")
colnames(deaths)[5]<-"Date"
colnames(deaths)[6]<-"Deaths"
#convert 2 column to character
############### recovered cases
recovered<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
recovered<-recovered[,c(1:4, (ncol(recovered)-120):ncol(recovered)) ]
recovered[,1:2] <- data.frame(lapply(recovered[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(recovered$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#recovered[which(recovered$Country.Region %in% DFCountry), ][,2]<-recovered[which(recovered$Country.Region %in% DFCountry), ][,1]
recovered[which(recovered$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
recovered[which(recovered$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
recovered <- melt(recovered, id.vars=1:4)
#recovered$variable <- as.Date(substring(ifelse(substrRight(as.character(recovered$variable), 2)=="20",paste0(str_sub(recovered$variable, end=-3),"2020"),paste0(str_sub(recovered$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
recovered$variable <-as.Date(substrLeft(as.character(recovered$variable), 1), format = "%m.%d.%y")
colnames(recovered)[5]<-"Date"
colnames(recovered)[6]<-"Recovered"
#convert 2 column to character
######################### vaccination data
Vaccin<-read.csv("https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/vaccine_data_global.csv")
IranVac<-dplyr::filter(Vaccin , Country_Region == "Iran")
#
#
WorldData<-merge(confirmed,recovered)
WorldDataMg<-merge(WorldData,deaths)
WorldDataMg<-WorldDataMg[,c("Country.Region", "Lat","Long","Date","Province.State","Confirmed","Recovered","Deaths")]
# ####### For some countries recovered and deaths misplaced it corrected here
# WorldDataMg<-WorldDataMg %>%
#   mutate(Deaths1 = ifelse(Recovered < Deaths, Recovered, Deaths),
#          Recovered = ifelse(Recovered < Deaths, Deaths, Recovered)) %>%
#   select(Country.Region,Lat,Long,Date,Province.State,Confirmed,Recovered, Deaths = Deaths1)
WorldData <- melt(WorldDataMg, id.vars=1:5)
WorldData$value<-as.numeric(as.character(WorldData$value))
WorldData$diff <- ave(WorldData$value, factor(c(WorldData$Country.Region)), FUN=function(x) as.numeric(as.character(c( NA ,diff(x)))))
WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,8]<-WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,7]# replace NA with firs value for series
WorldMean<-aggregate(value~ variable+Date,WorldData,FUN = "mean" )
WorldMin<-aggregate(value~ variable+Date,WorldData,FUN = "min" )
WorldMax<-aggregate(value~ variable+Date,WorldData,FUN = "max" )
WorldSum<-aggregate(value~ variable+Date+Country.Region+Province.State+Lat+Long,WorldData,FUN = "sum" )
WorldDiff<-aggregate(diff~ variable+Date+ Country.Region+Province.State+Lat+Long,WorldData,FUN = "max" )
WorldDiffMg<-dcast(WorldDiff, Country.Region +Lat+Long +Date+Province.State ~ variable, value.var = "diff")
WorldSumMax<-aggregate(value~ variable+Country.Region+Province.State ,WorldSum,FUN = "max" )
WorldSum_F<- aggregate(value~ variable+Date+Country.Region,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = value
)
WorldDiff_F<- aggregate(diff~ variable+Date+Country.Region,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = diff
)
WorldSumDiff<-merge(WorldSum_F,WorldDiff_F %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Date"))
WorldSumDiffS<-dplyr::filter(WorldSumDiff , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSum_FP<- aggregate(value~ variable+Date+Country.Region+Province.State,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = value
)
WorldDiff_FP<- aggregate(diff~ variable+Date+Country.Region+Province.State,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = diff
)
WorldSumDiff_FP<-merge(WorldSum_FP,WorldDiff_FP %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Province.State","Date"))
WorldSumDiff_FPS<-dplyr::filter(WorldSumDiff_FP , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSumAgr<<-aggregate(value~ variable+Date,WorldSum,FUN = "sum" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = value)
WorldDiffAgr<-aggregate(diff~ variable+Date,WorldDiff,FUN = "max" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = diff)%>%
rename("New.Confirmed"=Confirmed, "New.Recoverds"= Recovered, New.Deaths ="Deaths" )
WorldSumDiffAgr<-merge(WorldSumAgr,WorldDiffAgr , by=c("Date"))
IranSeries<-WorldSumDiff[which(WorldSumDiff$Country.Region=="Iran"),-c(1,3,4,5,7)]%>%
rename("ابتلا"=New.Confirmed, "مرگ"= New.Deaths)
IranSeries<-IranSeries[-1,]
IranSeries <- melt(IranSeries, id.vars=1)
# # ########################## calander converter
#
# library(jalcal)
# HadiGreg2jal<-function (x) {
#   df<-data.frame()
#   for(i in 1:length(x)){
#     date <- as.Date(x[i], format = "%Y-%m-%d")
#     date <- strsplit(as.character(date), split = "-")[[1]]
#     year <- as.integer(date[1])
#     month <- as.integer(date[2])
#     day <- as.integer(date[3])
#
#     df[i,1]<-paste(greg2jal0(year, month, day),collapse="-")
#   }
#   df$V1
# }
#
# ###########
# IranSeries$Date<- HadiGreg2jal(IranSeries$Date)
#
IranData<-data.frame("Date"=max(WorldSumDiffS$Date),
"Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Confirmed"],
"Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Deaths"],
"New.Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Confirmed"],
"New.Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Deaths"])
##################scarping data from worldmeter
library(tidyverse)
library(rvest)
content <- read_html("https://www.worldometers.info/coronavirus/#countries")
tables <- content %>% html_table(fill = TRUE)
first_table <- tables[[1]]
first_table <- first_table[,-1]
first_table[,c(2:14,16:21)] <-first_table[,c(2:14,16:21)] %>%
mutate_all(list(~ str_replace_all(., ",", "") %>%
as.numeric %>%
replace_na(0)))
first_table[,c(2:14,16:21)]<-apply(first_table[,c(2:14,16:21)] , 2, function(x) as.numeric(as.character(x)))
IranData2<-as.data.frame(first_table[which(first_table["Country,Other"]=="Iran"), ])
save.image(file = "/srv/shiny-server/COVID19-Reporter/DATA.RData")
save(IranData,file="/srv/shiny-server/somix/IranDATA.RData")
save(IranData2,file="/srv/shiny-server/somix/IranDATA2.RData")
save(IranVac,file="/srv/shiny-server/somix/IranVac.RData")
save(IranSeries,file="/srv/shiny-server/somix/IranSeries.RData")
# save.image(file = "J:/Social mixing/Shiny apps/SM project/somix/DATA.RData")
# save(IranData,file="J:/Social mixing/Shiny apps/SM project/somix/IranDATA.RData")
# save(IranData2,file="J:/Social mixing/Shiny apps/SM project/somix/IranDATA2.RData")
# save(IranVac,file="J:/Social mixing/Shiny apps/SM project/somix/IranVac.RData")
# save(IranSeries,file="J:/Social mixing/Shiny apps/SM project/somix/IranSeries.RData")
# save.image(file = "J:/Version with seir/Version for IER/COVID19-Reporter/DATA.RData")
load("D:/Social mixing/Shiny apps/SM project/somix/IranVac.RData")
View(IranVac)
load("D:/Social mixing/Shiny apps/SM project/somix/IranDATA2.RData")
View(IranData2)
load("D:/Social mixing/Shiny apps/SM project/somix/IranDATA.RData")
View(IranData)
library(reshape2)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
substrLeft <- function(x, n){
substr(x, 1+n, nchar(x))
}
# load("Populations.RData") # loading population
# ############### Confirmed cases
confirmed<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
confirmed<-confirmed[,c(1:4, (ncol(confirmed)-120):ncol(confirmed)) ] # data of recent 6 months
#replache china with provinces
confirmed[,1:2] <- data.frame(lapply(confirmed[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(confirmed$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#confirmed[which(confirmed$Country.Region %in% DFCountry), ][,2]<-confirmed[which(confirmed$Country.Region %in% DFCountry), ][,1]
confirmed[which(confirmed$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
confirmed[which(confirmed$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
confirmed <- melt(confirmed, id.vars=1:4)
library(stringr)  #str_sub(confirmed$variable, end=-2)
#devtools::install_github("freysimon/TigR")
#library(TigR)
#confirmed$variable <- as.Date(substring(ifelse(substrRight(as.character(confirmed$variable), 2)=="20",paste0(str_sub(confirmed$variable, end=-3),"2020"),paste0(str_sub(confirmed$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
confirmed$variable <-as.Date(substrLeft(as.character(confirmed$variable), 1), format = "%m.%d.%y")
colnames(confirmed)[5]<-"Date"
colnames(confirmed)[6]<-"Confirmed"
#convert 2 column to character
library(dplyr)
############### dead cases
deaths<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
deaths<-deaths[,c(1:4, (ncol(deaths)-120):ncol(deaths)) ]
#replache china with provinces
deaths[,1:2] <- data.frame(lapply(deaths[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(deaths$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#deaths[which(deaths$Country.Region %in% DFCountry), ][,2]<-deaths[which(deaths$Country.Region %in% DFCountry), ][,1]
deaths[which(deaths$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
deaths[which(deaths$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
deaths <- melt(deaths, id.vars=1:4)
#deaths$variable <- as.Date(substring(ifelse(substrRight(as.character(deaths$variable), 2)=="20",paste0(str_sub(deaths$variable, end=-3),"2020"),paste0(str_sub(deaths$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
deaths$variable <-as.Date(substrLeft(as.character(deaths$variable), 1), format = "%m.%d.%y")
colnames(deaths)[5]<-"Date"
colnames(deaths)[6]<-"Deaths"
#convert 2 column to character
############### recovered cases
recovered<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv")
recovered<-recovered[,c(1:4, (ncol(recovered)-120):ncol(recovered)) ]
recovered[,1:2] <- data.frame(lapply(recovered[,1:2], as.character), stringsAsFactors=FALSE)
DF<-data.frame(table(recovered$Country.Region))
DF<-DF[which(DF$Freq>1), ][,1]
DFCountry<-dput(as.character(DF))
#recovered[which(recovered$Country.Region %in% DFCountry), ][,2]<-recovered[which(recovered$Country.Region %in% DFCountry), ][,1]
recovered[which(recovered$Country.Region %in% "Israel"), ][,2]<-"Occupied Palestine"
recovered[which(recovered$Country.Region %in% "Taiwan*"), ][,2]<-"Taiwan"
recovered <- melt(recovered, id.vars=1:4)
#recovered$variable <- as.Date(substring(ifelse(substrRight(as.character(recovered$variable), 2)=="20",paste0(str_sub(recovered$variable, end=-3),"2020"),paste0(str_sub(recovered$variable, end=-3),"2021")),2), format = "%m.%d.%Y")
recovered$variable <-as.Date(substrLeft(as.character(recovered$variable), 1), format = "%m.%d.%y")
colnames(recovered)[5]<-"Date"
colnames(recovered)[6]<-"Recovered"
#convert 2 column to character
######################### vaccination data
Vaccin<-read.csv("https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/vaccine_data_global.csv")
IranVac<-dplyr::filter(Vaccin , Country_Region == "Iran")
#
WorldData<-merge(confirmed,recovered)
WorldDataMg<-merge(WorldData,deaths)
WorldDataMg<-WorldDataMg[,c("Country.Region", "Lat","Long","Date","Province.State","Confirmed","Recovered","Deaths")]
# ####### For some countries recovered and deaths misplaced it corrected here
# WorldDataMg<-WorldDataMg %>%
#   mutate(Deaths1 = ifelse(Recovered < Deaths, Recovered, Deaths),
#          Recovered = ifelse(Recovered < Deaths, Deaths, Recovered)) %>%
#   select(Country.Region,Lat,Long,Date,Province.State,Confirmed,Recovered, Deaths = Deaths1)
WorldData <- melt(WorldDataMg, id.vars=1:5)
WorldData$value<-as.numeric(as.character(WorldData$value))
WorldData$diff <- ave(WorldData$value, factor(c(WorldData$Country.Region)), FUN=function(x) as.numeric(as.character(c( NA ,diff(x)))))
WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,8]<-WorldData[is.na(WorldData$diff)|WorldData$diff<0, ][,7]# replace NA with firs value for series
WorldMean<-aggregate(value~ variable+Date,WorldData,FUN = "mean" )
WorldMin<-aggregate(value~ variable+Date,WorldData,FUN = "min" )
WorldMax<-aggregate(value~ variable+Date,WorldData,FUN = "max" )
WorldSum<-aggregate(value~ variable+Date+Country.Region+Province.State+Lat+Long,WorldData,FUN = "sum" )
WorldDiff<-aggregate(diff~ variable+Date+ Country.Region+Province.State+Lat+Long,WorldData,FUN = "max" )
WorldDiffMg<-dcast(WorldDiff, Country.Region +Lat+Long +Date+Province.State ~ variable, value.var = "diff")
WorldSumMax<-aggregate(value~ variable+Country.Region+Province.State ,WorldSum,FUN = "max" )
WorldSum_F<- aggregate(value~ variable+Date+Country.Region,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = value
)
WorldDiff_F<- aggregate(diff~ variable+Date+Country.Region,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region),
names_from = variable,
values_from = diff
)
WorldSumDiff<-merge(WorldSum_F,WorldDiff_F %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Date"))
WorldSumDiffS<-dplyr::filter(WorldSumDiff , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSum_FP<- aggregate(value~ variable+Date+Country.Region+Province.State,WorldSum,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = value
)
WorldDiff_FP<- aggregate(diff~ variable+Date+Country.Region+Province.State,WorldDiff,FUN = "sum" ) %>%
tidyr::pivot_wider(
c(Date,Country.Region,Province.State),
names_from = variable,
values_from = diff
)
WorldSumDiff_FP<-merge(WorldSum_FP,WorldDiff_FP %>%
dplyr::arrange(desc(Date), desc(Confirmed))%>%
dplyr::rename(New.Confirmed = Confirmed,New.Recoverds = Recovered,New.Deaths = Deaths) ,
by=c("Country.Region","Province.State","Date"))
WorldSumDiff_FPS<-dplyr::filter(WorldSumDiff_FP , Date == max(WorldSumDiff$Date) ) %>%
dplyr::arrange(desc(Confirmed))
WorldSumAgr<<-aggregate(value~ variable+Date,WorldSum,FUN = "sum" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = value)
WorldDiffAgr<-aggregate(diff~ variable+Date,WorldDiff,FUN = "max" )%>%
tidyr::pivot_wider(
c(Date),
names_from = variable,
values_from = diff)%>%
rename("New.Confirmed"=Confirmed, "New.Recoverds"= Recovered, New.Deaths ="Deaths" )
WorldSumDiffAgr<-merge(WorldSumAgr,WorldDiffAgr , by=c("Date"))
IranSeries<-WorldSumDiff[which(WorldSumDiff$Country.Region=="Iran"),-c(1,3,4,5,7)]%>%
rename("ابتلا"=New.Confirmed, "مرگ"= New.Deaths)
IranSeries<-IranSeries[-1,]
IranSeries <- melt(IranSeries, id.vars=1)
IranData<-data.frame("Date"=max(WorldSumDiffS$Date),
"Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Confirmed"],
"Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"Deaths"],
"New.Confirmed"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Confirmed"],
"New.Deaths"=WorldSumDiffS[which(WorldSumDiffS$Country.Region=="Iran"),"New.Deaths"])
##################scarping data from worldmeter
library(tidyverse)
library(rvest)
content <- read_html("https://www.worldometers.info/coronavirus/#countries")
tables <- content %>% html_table(fill = TRUE)
first_table <- tables[[1]]
first_table <- first_table[,-1]
first_table[,c(2:14,16:21)] <-first_table[,c(2:14,16:21)] %>%
mutate_all(list(~ str_replace_all(., ",", "") %>%
as.numeric %>%
replace_na(0)))
first_table[,c(2:14,16:21)]<-apply(first_table[,c(2:14,16:21)] , 2, function(x) as.numeric(as.character(x)))
IranData2<-as.data.frame(first_table[which(first_table["Country,Other"]=="Iran"), ])
#save.image(file = "/srv/shiny-server/COVID19-Reporter/DATA.RData")
#save(IranData,file="/srv/shiny-server/somix/IranDATA.RData")
#save(IranData2,file="/srv/shiny-server/somix/IranDATA2.RData")
#save(IranVac,file="/srv/shiny-server/somix/IranVac.RData")
#save(IranSeries,file="/srv/shiny-server/somix/IranSeries.RData")
save.image(file = "D:/Social mixing/Shiny apps/SM project/somix/DATA.RData")
save(IranData,file="D:/Social mixing/Shiny apps/SM project/somix/IranDATA.RData")
save(IranData2,file="D:/Social mixing/Shiny apps/SM project/somix/IranDATA2.RData")
save(IranVac,file="D:/Social mixing/Shiny apps/SM project/somix/IranVac.RData")
save(IranSeries,file="D:/Social mixing/Shiny apps/SM project/somix/IranSeries.RData")
# save.image(file = "J:/Version with seir/Version for IER/COVID19-Reporter/DATA.RData")
View(IranVac)
shiny::runApp()
View(IranVac)
